<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


    <context:component-scan base-package="com.hong.service"/>
    <!--<context:component-scan base-package="com.hong.utils"/>-->

    <bean id="keyGeneratorConfig" class="com.hong.dao.mybatis.ApplicationConfig"/>

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver"
            p:viewClass="org.springframework.web.servlet.view.JstlView"
            p:prefix="/WEB-INF/jsp/v1.1/"
            p:suffix=".jsp"
    />

    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig"
          init-method="init"
          p:dir="META-INF/druid/wall/mysql"/>

    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter"
          p:dbType="mysql"
          p:config="wall-filter-config"
          />

    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.hong.web.*</value>
                <value>com.hong.service.*</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close"
          p:filters="stat, log4j"
          p:driverClassName="com.mysql.jdbc.Driver"
          p:url="your_db_url"
          p:username="root"
          p:password="your_root_password">
    <!--<property name="driver" value="${jdbc.driverClassName}"/>-->
    <!--<property name="url" value="${jdbc.url}"/>-->
    <!--<property name="username" value="${jdbc.username}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->

        <property name="proxyFilters">
            <list>
                <ref bean="wall-filter"/>
            </list>
        </property>
    </bean>

    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"

          />

    <bean class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!--p:sqlSessionFactoryBeanName="sqlSessionFactory"-->
    <!--p:basePackage="com.hong.dao.mybatis"-->
    <!--lazy-init="true"/>-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.hong.dao.mybatis" />
    </bean>

    <bean id="testMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.hong.dao.mybatis.TestMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="commentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.hong.dao.mybatis.CommentMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="typeMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.hong.dao.mybatis.TypeMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/><!--报错，但没有关系！ -->
    </aop:config>

    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="300" />
        <property name="maxWaitMillis" value="1000" />
        <property name="testOnBorrow" value="true" />
        <property name="maxTotal" value="8" />
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig" />
        <property name="port" value="6379" />
        <property name="hostName" value="your_hostName" />
        <property name="password" value="your_password" />
        <property name="timeout" value="100000" />
        <property name="database" value="0"/>
    </bean>

    <!-- org.springframework.data.redis.core.RedisTemplate-->
    <bean id="redisTemplate" class="com.hong.utils.redis.MyRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <bean id="methodCacheInterceptor" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="com.hong.utils.redis.RedisUtil">
                    <property name="redisTemplate" ref="redisTemplate"/>
                    <property name="name" value="common" />
                </bean>
            </set>
        </property>
    </bean>

    <!--<bean id="redisUtil" class="com.hong.utils.redis.RedisUtil" >-->
        <!--<property name="redisTemplate" ref="redisTemplate"/>-->
        <!--&lt;!&ndash; name属性的值,是用于等会的注解当中 &ndash;&gt;-->
        <!--<property name="name" value="common" />-->
    <!--</bean>-->

    <cache:annotation-driven cache-manager="methodCacheInterceptor"/>

    <!--&lt;!&ndash;设置需要加入缓存的类或者方法&ndash;&gt;-->
    <!--<bean id="methodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">-->
        <!--<property name="advice" ref="methodCacheInterceptor"/>-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.hong.service.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->


</beans>